/*
  * Copyright (c) 2020 The ZMK Contributors
  *
  * SPDX-License-Identifier: MIT
  */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        bhm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;
        };
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            bindings =
                <&kp P>,
                <&kp MINUS>;
        };
        td1: td1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD1";
            #binding-cells = <0>;
            bindings =
                <&kp Q>,
                <&kp TAB>;
        };
        td_mt0: td_mt0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MT0";
            #binding-cells = <0>;
            bindings =
                <&bhm LSHFT A>,
                <&kp ESCAPE>;
        };
        td1_mt: td1_mt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD1_MT";
            #binding-cells = <0>;
            bindings =
                <&bhm RSHIFT SEMICOLON>,
                <&kp SQT>;
        };
    };

    keymap {
      compatible = "zmk,keymap";
  layer0 {
          bindings = <
          &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &mt LEFT_SHIFT A &mt LEFT_CONTROL S &mt LEFT_ALT D &mt LEFT_GUI F &kp G &kp H RGUI_T(KC_J) RALT_T(KC_K) RCTL_T(KC_L) RSFT_T(KC_SCLN) &lt 3 Z &kp X &kp C &kp V &kp B &kp N &kp M &kp COMMA &kp DOT &lt 3 SLASH &kp BACKSPACE &kp LEFT_GUI &lt 1 ESCAPE &lt 2 TAB &kp ENTER &kp SPACE
          >;
        };layer1 {
          bindings = <
          KC_EXLM KC_AT KC_HASH KC_DLR KC_PERC KC_CIRC KC_AMPR KC_ASTR KC_LPRN KC_RPRN &mt LEFT_SHIFT N1 &mt LEFT_CONTROL N2 &mt LEFT_ALT N3 &mt LEFT_GUI N4 &kp N5 &kp N6 RSFT_T(KC_7) RCTL_T(KC_8) RALT_T(KC_9) RGUI_T(KC_0) &kp GRAVE &kp BACKSLASH &kp LEFT &kp RIGHT &kp EQUAL &kp MINUS &kp UP &kp DOWN &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp DELETE &kp LEFT_CONTROL &trans &mo 3 &kp ENTER &kp SPACE
          >;
        };layer2 {
          bindings = <
          KC_PLUS KC_TILD &kp F20 &kp F20 &kp F20 &kp F20 KC_AMPR KC_ASTR KC_LPRN &kp MINUS &kp KP_EQUAL &kp GRAVE &kp F20 &kp F20 &kp F20 &kp MINUS &kp EQUAL &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp SINGLE_QUOTE &kp BACKSLASH KC_PIPE &kp HOME &kp END &kp F20 KC_UNDS &kp PAGE_UP &kp PAGE_DOWN &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp DELETE &kp LEFT_CONTROL &mo 3 &trans &kp ENTER &kp RIGHT_ALT
          >;
        };layer3 {
          bindings = <
          KC_EXLM KC_AT KC_HASH KC_DLR KC_PERC KC_CIRC KC_AMPR KC_ASTR KC_LPRN KC_RPRN &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 RGB_HUD RGB_SAD RGB_VAD &kp F20 &kp F20 &kp F20 &kp F20 &kp F20 &kp F20 &kp F20 &kp LEFT_GUI &kp SPACE &trans &trans &kp ENTER &kp RIGHT_ALT
          >;
        };
    };
};
 

/*
  * Copyright (c) 2020 The ZMK Contributors
  *
  * SPDX-License-Identifier: MIT
  */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

&soft_off {
    hold-time-ms = <2000>; // Only turn off it the key is held for 2 seconds or longer.
};

/ {
    behaviors {
        bhm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        td0_p_sqt: td0_p_sqt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0_P_SQT";
            #binding-cells = <0>;
            bindings = <&kp P>, <&kp SQT>;
        };

        td1_q_tab: td1_q_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "TD1_Q_TAB";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp TAB>;
        };

        td_shift_a_esc: td_shift_a_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFT_A_ESC";
            #binding-cells = <0>;
            bindings = <&bhm LSHFT A>, <&kp ESCAPE>;
        };

        td1_shift_semi_quote: td1_shift_semi_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TD1_SHIFT_SEMI_QUOTE";
            #binding-cells = <0>;
            bindings = <&bhm RSHIFT SEMICOLON>, <&kp SQT>;
        };

        td_z_tilda: td_z_tilda {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Z_TILDA";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp TAB>;
        };

        td_slash_dquote: td_slash_dquote {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SLASH_DQUOTE";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp DOUBLE_QUOTES>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&td1_q_tab         &kp W         &kp E          &kp R         &kp T           &kp Y      &kp U        &kp I        &kp O         &td0_p_sqt
&bhm LEFT_SHIFT A  &bhm LCTRL S  &bhm LGUI D    &bhm LALT F   &kp G           &kp H      &bhm RALT J  &bhm RGUI K  &bhm RCTRL L  &bhm RIGHT_SHIFT SEMICOLON
&lt 2 Z            &kp X         &kp C          &lt 2 V       &kp B           &kp N      &lt 2 M      &kp COMMA    &kp PERIOD    &lt 2 SLASH
                                 &kp BACKSPACE  &kp LEFT_GUI  &lt 1 ESCAPE    &lt 1 TAB  &kp ENTER    &kp SPACE
            >;
        };

        layer1 {
            bindings = <
&kp EXCLAMATION  &kp AT     &kp HASH    &kp DLLR          &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp N1           &kp N2     &kp N3      &kp N4            &kp N5       &kp N6     &kp N7     &kp N8     &kp N9                &kp N0
&kp GRAVE        &kp TILDE  &kp LEFT    &kp RIGHT         &kp EQUAL    &kp MINUS  &kp UP     &kp DOWN   &kp LEFT_BRACKET      &kp RIGHT_BRACKET
                            &kp DELETE  &kp LEFT_CONTROL  &trans       &mo 0      &kp ENTER  &kp SPACE
            >;
        };

        layer3 {
            bindings = <
&kp PLUS   &kp LS(MINUS)  &bt BT_CLR  &bt BT_PRV        &bt BT_NXT           &kp CARET  &kp AMPERSAND  &kp PLUS       &kp UNDERSCORE     &kp LS(UNDER)
&kp EQUAL  &kp GRAVE      &kp F20     &kp F20           &ext_power EP_TOG    &kp PLUS   &kp MINUS      &kp EQUAL      &kp DOUBLE_QUOTES  &kp LS(PIPE)
&kp TILDE  &kp PIPE       &kp HOME    &kp END           &soft_off            &kp PLUS   &kp PAGE_UP    &kp LS(LBRC)   &kp LS(RBRC)       &kp LS(DQT)
                          &kp DELETE  &kp LEFT_CONTROL  &kp END              &trans     &kp ENTER      &kp RIGHT_ALT
            >;
        };
    };
};
